
################ for creating the rule graph from the snakefile#########################
#
#warning: if any print commande in the script, the dag commande will fail!
# update Project_id n the configfile
#
#/usr/local/bin/snakemake --forceall --snakefile /datacit/03_TOOLS/PIPELINES/RNAseq/snakemakes/MAP_STAR_PE_V0.04.snake  --configfile /mnt/citprojects/CIT_PROJECTS_HS/Project_id/Data/Experiment_data/RNA_seq/03_Metadata/RNAseq_mapping_STAR_args.yaml  --rulegraph | dot -Tpdf -o ruledag.pdf
#
#########################################################################################


##############for creating the complete sample graph from the snakefile#########################
#warning: if any print commande in the script, the dag commande will fail!
# update Project_id n the configfile
#/usr/local/bin/snakemake --forceall --snakefile /datacit/03_TOOLS/PIPELINES/RNAseq/snakemakes/MAP_STAR_PE_V0.04.snake  --configfile /mnt/citprojects/CIT_PROJECTS_HS/Project_id/Data/Experiment_data/RNA_seq/03_Metadata/RNAseq_mapping_STAR_args.yaml  --dag | dot -Tpdf -o dag.pdf
#
#########################################################################################


################ Commande line to launch the snakemake on the HPC #########################
# Warning: use the -np option to compile and check the snake/yaml consistency.
#
# snakemake -np -s /datacit/03_TOOLS/PIPELINES/RNAseq/snakemakes/MAP_STAR_PE_V0.04.snake  --configfile /mnt/citprojects/CIT_PROJECTS_HS/Project_id/Data/Experiment_data/RNA_seq/RNAseq_mapping_STAR_args.yaml
#
#the commande below will launch the snakemake on the cluster. please, update the "project_id" in the configfile
#
#/usr/local/bin/snakemake  -s /datacit/03_TOOLS/PIPELINES/RNAseq/snakemakes/MAP_STAR_PE_V0.04.snake --configfile /mnt/citprojects/CIT_PROJECTS_HS/project_id/Data/Experiment_data/RNA_seq/03_Metadata/RNAseq_mapping_STAR_args.yaml --cores 208 --cluster /datacit/11_INFORMATIQUE/slurm_files/slurm_scheduler.py --cluster-config /datacit/11_INFORMATIQUE/slurm_files/slurm.json
#
#########################################################################################

############### To prepare reference genome for Bismark ##############
#
#bismark_genome_preparation --path_to_aligner /usr/local/bin/bowtie2 /path/to/genome
#
################################################################


from os.path import join
rawdir=config["rawdir"]
newdir=config["newdir"]
fname=config["samplelist"]
genomed=config["genome"]
#fsamplename=join(rawdir, fname)
with open(fname) as f:
  RAWSAMPLES = f.readlines()

pair=['R1', 'R2']

RAWSAMPLES = [x.strip() for x in RAWSAMPLES]
SAMPLES = []
for s in RAWSAMPLES:
	if not s.startswith('#'):
		SAMPLES.append(s)

rule all:
	input:
		expand(join(newdir, "04_Processed/Methylation_call/{sample}/CpG_context_{sample}_R1_bismark_bt2_pe.txt.gz"), sample=SAMPLES)
#		join(newdir,"02_QC/Mapping_qc.html")


rule copyFile:
	input:
		join(rawdir, "{sample}_{pair}.fastq.gz")
	output:
		join(newdir, "01_Raw_files/{sample}_{pair}.fastq.gz")
	params:
		indir = config["rawdir"],
		cdir = config["newdir"],
		sample = "{sample}_{pair}.fastq.gz"
	message: "Copy of the fastq files"
	shell:
		"""
		echo \"Copy of {params.sample}\"
		mkdir -p {params.cdir}
		mcp -r {params.indir}/{params.sample} {params.cdir}/01_Raw_files/
		"""


rule gz:
	input:
		join(newdir, "01_Raw_files/{sample}_{pair}.fastq.gz")
	output:
		temp(join(newdir,"01_Raw_files/{sample}_{pair}.fastq"))
	shell:
		"gzip -d {input}"


rule Bismark:
	input:
		R1 = join(newdir, "01_Raw_files/{sample}_R1.fastq"),
		R2 = join(newdir, "01_Raw_files/{sample}_R2.fastq")
	output:
		join(newdir, "04_Processed/Mapping_output/{sample}/{sample}_R1_bismark_bt2_pe.bam")
	threads: 16
	params:
		genomedir= genomed,
		folder= directory(join(newdir, "04_Processed/Mapping_output/{sample}"))
	shell:
		"""
		mkdir -p {params.folder} 
		bismark --genome {params.genomedir} --fastq -1 {input.R1} -2 {input.R2} \
		 -o {params.folder} --bam 
		"""

#rule bismark_qc:
#	input:
#		expand(join(newdir, "04_Processed/Mapping_output/{sample}/"),sample=SAMPLES)
#	output:
#		mapqc=join(newdir,"02_QC/Mapping_qc.html")
#	params:
#		basename="Mapping_qc.html",
#		outdir=join(newdir, "02_QC")
#	shell:
#		"bismark2report --alignment_report {input} -o {params.basename} --dir {params.outdir}"

rule methylation_extractor:
	input:
		join(newdir,"04_Processed/Mapping_output/{sample}/{sample}_R1_bismark_bt2_pe.bam")
	output:
		join(newdir,"04_Processed/Methylation_call/{sample}/CpG_context_{sample}_R1_bismark_bt2_pe.txt.gz")
	params:
		folder=directory(join(newdir, "04_Processed/Methylation_call/{sample}")),
		genomedir=genomed
	shell:
		"bismark_methylation_extractor --gzip --bedGraph --genome_folder {params.genomedir} \
		 {input} -o {params.folder} --no_overlap --comprehensive"









#rule indexBAM:
#	input:
#		join(newdir, "04_Processed/Mapping_output/{sample}/{sample}_R1_bismark_bt2_pe.bam")
#	output:
#		join(newdir, "04_Processed/Mapping_output/{sample}/{sample}_R1_bismark_bt2_pe.bai")
#	shell:
#		"samtools index {input} {output}"
#
